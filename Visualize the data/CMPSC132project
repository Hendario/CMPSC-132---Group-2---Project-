from pandas_datareader import data as web
import datetime
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import LSTM, Dropout, Dense, Activation

stock = 'AAPL'

start_date = (datetime.datetime.now() - datetime.timedelta(days=365)).strftime("%m-%d-%Y")
df = web.DataReader(stock, data_source='yahoo', start=start_date)

df


high_prices = df['High'].values
low_prices = df['Low'].values

mid_prices = (high_prices + low_prices) / 2

seq_len = 50
sequence_length = seq_len + 1 #Adding one because we use 50 cases for come up with one predict result.
result = []

for index in range(len(mid_prices) - sequence_length):
    result.append(mid_prices[index: index + sequence_length])
normalized_data = [] #We normalize the data so the practice can train more accurately. 

for window in result:
    normalized_window = [((float(p) / float(window[0])) - 1) for p in window]
    normalized_data.append(normalized_window)
    
    result = np.array(normalized_data)
    
row = int(round(result.shape[0] * 0.9))
train = result[:row, :]
x_train = train[:,:-1]
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
y_train = train[:,-1]

x_test = result[row:, :-1]
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))
y_test = result[row:, -1]

x_train.shape, x_test.shape

practice = Sequential()
practice.add(LSTM(50, return_sequences = True, input_shape = (50,1)))
practice.add(LSTM(80, return_sequences = False))
practice.add(Dense(1, activation = 'linear'))
practice.compile(loss = 'mse', optimizer = 'rmsprop')
practice.summary()
practice.fit(x_train, y_train,
         validation_data = (x_test, y_test),
         batch_size= 10,
         epochs = 30) # I run both 20, 30 and 30 has more less value of val_loss which means it is better with 30 than 20.
         
pred = practice.predict(x_test)

fig = plt.figure(facecolor = 'white')
ax = fig.add_subplot(111)
ax.plot(y_test, label = 'True')
ax.plot(pred, label = 'Prediction')
ax.legend()
plt.show()
